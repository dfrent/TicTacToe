{\rtf1\ansi\ansicpg1252\cocoartf1504\cocoasubrtf830
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 Menlo-Regular;\f2\fnil\fcharset0 HelveticaNeue;
}
{\colortbl;\red255\green255\blue255;\red33\green118\blue199;\red246\green243\blue231;\red81\green105\blue113;
\red115\green138\blue4;\red165\green119\blue5;\red45\green132\blue123;\red191\green101\blue92;\red245\green231\blue186;
\red56\green56\blue56;\red247\green247\blue247;\red67\green67\blue67;\red0\green0\blue0;\red129\green144\blue144;
}
{\*\expandedcolortbl;;\cssrgb\c14902\c54510\c82353;\cssrgb\c97255\c96078\c92549;\cssrgb\c38824\c48627\c51765;
\cssrgb\c52157\c60000\c0;\cssrgb\c70980\c53725\c0;\cssrgb\c21176\c58431\c55686;\cssrgb\c80000\c47843\c43529;\cssrgb\c96863\c92157\c77647;
\cssrgb\c28235\c28235\c28235;\cssrgb\c97647\c97647\c97647;\cssrgb\c33333\c33333\c33333;\cssrgb\c0\c0\c0\c3922;\cssrgb\c57647\c63137\c63137;
}
\margl1440\margr1440\vieww18720\viewh13340\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\b\fs36 \cf0 All changes are in game.js
\b0\fs24 \
\
We'll need to first, be able to keep track of the steps (so if we want to jump to move 3, we know what move 3 was!).\
\
Currently, a history exists which tracks what move has been made (so the board can be redrawn each time!). We can leverage that by keeping track of which step this is - it's just an array, so we know that move 0 is at index 0 of the array - this will correspond with step 0.\
\
We do this with state - we can keep track of the current step number.\
\
First, add a new key to Game's state to indicate which step we're currently viewing.\
\
Add stepNumber: 0 to the initial state in Game's constructor:\
\
\
\pard\pardeftab720\sl300\partightenfactor0

\f1\fs26 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 class\cf4 \strokec4  Game \cf2 \strokec2 extends\cf4 \strokec4  React.Component \{\
  constructor() \{\
    \cf2 \strokec2 super\cf4 \strokec4 ();\
    \cf5 \strokec5 this\cf4 \strokec4 .state \cf5 \strokec5 =\cf4 \strokec4  \{\
      history\cf5 \strokec5 :\cf4 \strokec4  [\{\
        squares\cf5 \strokec5 :\cf4 \strokec4  \cf6 \strokec6 Array\cf4 \strokec4 (\cf7 \strokec7 9\cf4 \strokec4 ).fill(\cf8 \strokec8 null\cf4 \strokec4 ),\
      \}],\
\cb9       stepNumber\cf5 \strokec5 :\cf4 \strokec4  \cf7 \strokec7 0\cf4 \strokec4 ,\
\cb3       xIsNext\cf5 \strokec5 :\cf4 \strokec4  \cf8 \strokec8 true\cf4 \strokec4 ,\
    \};\
  \}
\f0\fs24 \cf0 \cb1 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
Second,
\f2 \cf10 \cb11 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec10  update 
\f1\fs26 \cf12 \cb13 \strokec12 stepNumber
\f2\fs24 \cf10 \cb11 \strokec10  when a new move is made by adding 
\f1\fs26 \cf12 \cb13 \strokec12 stepNumber: history.length
\f2\fs24 \cf10 \cb11 \strokec10  to the state update in Game's 
\f1\fs26 \cf12 \cb13 \strokec12 handleClick
\f2\fs24 \cf10 \cb11 \strokec10 :
\f0 \cf0 \cb1 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 \
\
\pard\pardeftab720\sl300\partightenfactor0

\f1\fs26 \cf4 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 handleClick(i) \{\
\cb9     \cf2 \strokec2 const\cf4 \strokec4  history \cf5 \strokec5 =\cf4 \strokec4  \cf5 \strokec5 this\cf4 \strokec4 .state.history.slice(\cf7 \strokec7 0\cf4 \strokec4 , \cf5 \strokec5 this\cf4 \strokec4 .state.stepNumber \cf5 \strokec5 +\cf4 \strokec4  \cf7 \strokec7 1\cf4 \strokec4 );\
\cb3     \cf2 \strokec2 const\cf4 \strokec4  current \cf5 \strokec5 =\cf4 \strokec4  history[history.length \cf5 \strokec5 -\cf4 \strokec4  \cf7 \strokec7 1\cf4 \strokec4 ];\
    \cf2 \strokec2 const\cf4 \strokec4  squares \cf5 \strokec5 =\cf4 \strokec4  current.squares.slice();\
    \cf5 \strokec5 if\cf4 \strokec4  (calculateWinner(squares) \cf5 \strokec5 ||\cf4 \strokec4  squares[i]) \{\
      \cf5 \strokec5 return\cf4 \strokec4 ;\
    \}\
    squares[i] \cf5 \strokec5 =\cf4 \strokec4  \cf5 \strokec5 this\cf4 \strokec4 .state.xIsNext \cf5 \strokec5 ?\cf4 \strokec4  \cf7 \strokec7 'X'\cf4 \strokec4  \cf5 \strokec5 :\cf4 \strokec4  \cf7 \strokec7 'O'\cf4 \strokec4 ;\
    \cf5 \strokec5 this\cf4 \strokec4 .setState(\{\
      history\cf5 \strokec5 :\cf4 \strokec4  history.concat([\{\
        squares\cf5 \strokec5 :\cf4 \strokec4  squares\
      \}]),\
\cb9       stepNumber\cf5 \strokec5 :\cf4 \strokec4  history.length,\
\cb3       xIsNext\cf5 \strokec5 :\cf4 \strokec4  \cf5 \strokec5 !this\cf4 \strokec4 .state.xIsNext,\
    \});\
  \}\
\
\

\f0\fs24 \cf0 \cb1 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 \
\
\
\pard\pardeftab720\sl280\sa200\partightenfactor0

\f2 \cf10 \cb11 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec10 Third, we'll define the 
\f1\fs26 \cf12 \cb13 \strokec12 jumpTo
\f2\fs24 \cf10 \cb11 \strokec10  method in Game to update that state. We also want to update 
\f1\fs26 \cf12 \cb13 \strokec12 xIsNext
\f2\fs24 \cf10 \cb11 \strokec10 . We set 
\f1\fs26 \cf12 \cb13 \strokec12 xIsNext
\f2\fs24 \cf10 \cb11 \strokec10  to true if the index of the move number is an even number.\
Add a method called 
\f1\fs26 \cf12 \cb13 \strokec12 jumpTo
\f2\fs24 \cf10 \cb11 \strokec10  to the Game class:\
\pard\pardeftab720\sl300\partightenfactor0

\f0 \cf0 \cb1 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 \
\

\f1\fs26 \cf4 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4   handleClick(i) \{\
    \cf14 \strokec14 // this method has not changed\cf4 \strokec4 \
  \}\
\
\cb9   jumpTo(step) \{\
    \cf5 \strokec5 this\cf4 \strokec4 .setState(\{\
      stepNumber\cf5 \strokec5 :\cf4 \strokec4  step,\
      xIsNext\cf5 \strokec5 :\cf4 \strokec4  (step \cf5 \strokec5 %\cf4 \strokec4  \cf7 \strokec7 2\cf4 \strokec4 ) \cf5 \strokec5 ?\cf4 \strokec4  \cf8 \strokec8 false\cf4 \strokec4  \cf5 \strokec5 :\cf4 \strokec4  \cf8 \strokec8 true\cf4 \strokec4 ,\
    \});\
  \}\
\cb3 \
  render() \{\
    \cf14 \strokec14 // this method has not changed\cf4 \strokec4 \
  \}\
\
\

\f0\fs24 \cf0 \cb1 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 \
\
\pard\pardeftab720\sl280\partightenfactor0

\f2 \cf10 \cb11 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec10 Fourth, you can modify Game's 
\f1\fs26 \cf12 \cb13 \strokec12 render
\f2\fs24 \cf10 \cb11 \strokec10  to read from that step in the history:\
\

\f0 \cf0 \cb1 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 \
\pard\pardeftab720\sl300\partightenfactor0

\f1\fs26 \cf4 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4   render() \{\
    \cf2 \strokec2 const\cf4 \strokec4  history \cf5 \strokec5 =\cf4 \strokec4  \cf5 \strokec5 this\cf4 \strokec4 .state.history;\
\cb9     \cf2 \strokec2 const\cf4 \strokec4  current \cf5 \strokec5 =\cf4 \strokec4  history[\cf5 \strokec5 this\cf4 \strokec4 .state.stepNumber];\
\cb3     \cf2 \strokec2 const\cf4 \strokec4  winner \cf5 \strokec5 =\cf4 \strokec4  calculateWinner(current.squares);\
\
    \cf14 \strokec14 // the rest has not changed\
\
\

\f0\fs24 \cf0 \cb1 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 \
Lastly, make each list item a link that calls jumpTo!\

\f1\fs26 \cf5 \cb9 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 <\cf4 \strokec4 li\cf5 \strokec5 >\cf4 \strokec4 \
          \cf5 \strokec5 <\cf4 \strokec4 a href\cf5 \strokec5 =\cf7 \strokec7 "#"\cf4 \strokec4  onClick\cf5 \strokec5 =\cf4 \strokec4 \{() \cf5 \strokec5 =>\cf4 \strokec4  \cf5 \strokec5 this\cf4 \strokec4 .jumpTo(move)\}\cf5 \strokec5 >\cf4 \strokec4 \{desc\}\cf5 \strokec5 <\cf4 \strokec4 /a>\
        \cf5 \strokec5 <\cf4 \strokec4 /li>\
}